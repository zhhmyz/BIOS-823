cbind(Dev.logit=fit.logit$deviance, Dev.probit=fit.probit$deviance, Dev.cloglog=fit.cloglog$deviance)
#### Compare AIC
cbind(AIC.logit=fit.logit$aic, AIC.probit=fit.probit$aic, AIC.cloglog=fit.cloglog$aic)
#### Compare fitted values
cbind(beetle,
yhat.logit=round(beetle[,"n"]*fit.logit$fitted.values, digits=2),
yhat.probit=round(beetle[,"n"]*fit.probit$fitted.values, digits=2),
yhat.cloglog=round(beetle[,"n"]*fit.cloglog$fitted.values, digits=2))
#### Compare estimated coefficients
summary(fit.logit)$coefficient[1:2,1:2]
summary(fit.probit)$coefficient[1:2,1:2]
summary(fit.cloglog)$coefficient[1:2,1:2]
#### Compare residual deviance
cbind(Dev.logit=fit.logit$deviance, Dev.probit=fit.probit$deviance, Dev.cloglog=fit.cloglog$deviance)
#### Compare AIC
cbind(AIC.logit=fit.logit$aic, AIC.probit=fit.probit$aic, AIC.cloglog=fit.cloglog$aic)
#### Compare fitted values
cbind(df,
yhat.logit=round(beetle[,"n"]*fit.logit$fitted.values, digits=2),
yhat.probit=round(beetle[,"n"]*fit.probit$fitted.values, digits=2),
yhat.cloglog=round(beetle[,"n"]*fit.cloglog$fitted.values, digits=2))
#### Compare estimated coefficients
summary(fit.logit)$coefficient[1:2,1:2]
summary(fit.probit)$coefficient[1:2,1:2]
summary(fit.cloglog)$coefficient[1:2,1:2]
#### Compare residual deviance
cbind(Dev.logit=fit.logit$deviance, Dev.probit=fit.probit$deviance, Dev.cloglog=fit.cloglog$deviance)
#### Compare AIC
cbind(AIC.logit=fit.logit$aic, AIC.probit=fit.probit$aic, AIC.cloglog=fit.cloglog$aic)
#### Compare fitted values
cbind(df,
yhat.logit=round(df[,"n"]*fit.logit$fitted.values, digits=2),
yhat.probit=round(df[,"n"]*fit.probit$fitted.values, digits=2),
yhat.cloglog=round(df[,"n"]*fit.cloglog$fitted.values, digits=2))
df
df_new <- cbind(df,
yhat.logit=round(df[,"n"]*fit.logit$fitted.values, digits=2),
yhat.probit=round(df[,"n"]*fit.probit$fitted.values, digits=2),
yhat.cloglog=round(df[,"n"]*fit.cloglog$fitted.values, digits=2))
#### Compare estimated coefficients
summary(fit.logit)$coefficient[1:2,1:2]
summary(fit.probit)$coefficient[1:2,1:2]
summary(fit.cloglog)$coefficient[1:2,1:2]
#### Compare residual deviance
cbind(Dev.logit=fit.logit$deviance, Dev.probit=fit.probit$deviance, Dev.cloglog=fit.cloglog$deviance)
#### Compare AIC
cbind(AIC.logit=fit.logit$aic, AIC.probit=fit.probit$aic, AIC.cloglog=fit.cloglog$aic)
#### Compare fitted values
df_new <- cbind(df,
yhat.logit=round(df[,"n"]*fit.logit$fitted.values, digits=2),
yhat.probit=round(df[,"n"]*fit.probit$fitted.values, digits=2),
yhat.cloglog=round(df[,"n"]*fit.cloglog$fitted.values, digits=2))
df_new
df_new %>% arrange(y)
df_new <- df_new %>% arrange(y)
View(df_new)
df_new <- df_new %>% arrange(y) %>% select(-c(dose,n))
df_new
#### Compare estimated coefficients
summary(fit.logit)$coefficient[1:2,1:2]
summary(fit.probit)$coefficient[1:2,1:2]
summary(fit.cloglog)$coefficient[1:2,1:2]
#### Compare residual deviance
cbind(Dev.logit=fit.logit$deviance, Dev.probit=fit.probit$deviance, Dev.cloglog=fit.cloglog$deviance)
#### Compare AIC
cbind(AIC.logit=fit.logit$aic, AIC.probit=fit.probit$aic, AIC.cloglog=fit.cloglog$aic)
#### Compare fitted values
df_new <- cbind(df,
yhat.logit=round(df[,"n"]*fit.logit$fitted.values, digits=2),
yhat.probit=round(df[,"n"]*fit.probit$fitted.values, digits=2),
yhat.cloglog=round(df[,"n"]*fit.cloglog$fitted.values, digits=2))
df_new <- df_new %>% arrange(y) %>% select(-c(dose,n))
df_new
#### Compare residual deviance
cbind(Dev.logit=fit.logit$deviance, Dev.probit=fit.probit$deviance, Dev.cloglog=fit.cloglog$deviance)
#### Compare AIC
cbind(AIC.logit=fit.logit$aic, AIC.probit=fit.probit$aic, AIC.cloglog=fit.cloglog$aic)
#### Compare estimated coefficients
summary(fit.logit)$coefficient[1:2,1:2]
#### Compare estimated coefficients
summary(fit.logit)$coefficient[1:2,1:2]
summary(fit.probit)$coefficient[1:2,1:2]
summary(fit.cloglog)$coefficient[1:2,1:2]
summary(fit.cloglog)$coefficient[1:2,1:2]
#### Compare estimated coefficients
summary(fit.logit)$coefficient[1:2,1:2]
summary(fit.cloglog)$coefficient[1:2,1:2]
floor?
dssd
?floor
?%%
%%
5 %% 2
100/3
floor(100/3)
library(readxl)
library(table1)
library(dplyr)
library(ggpubr)
library(cluster)
library(factoextra)
library(pheatmap)
library(fpc)
library(plotly)
library(pheatmap)
set.seed(1234)
# fix var_epsilon = 1, k = 3
simulated_fun <- function(ICC, sample_size, num_groups, var_epsilon = 1, mu = 0){
var_alpha <- (ICC * var_epsilon)/(1 - ICC)
remainder <- sample_size %% num_groups
num_j <- sample_size / num_groups
df <- data.frame()
for (i in 1:num_groups){
size <- floor(sample_size, num_groups)
if (remainder >0) {
size <- size + 1
remainder = remainder - 1
}
group_j <- data.frame(group = factor(i),
alpha_j = rnorm(n = 1, mean = 0, sd = sqrt(var_alpha)),
epsilon_ij = rnorm(n = num_j, mean = 0, sd = sqrt(var_epsilon))) %>%
mutate(y = mu + alpha_j + epsilon_ij)
df <- rbind(df, group_j)
}
df1 <- df %>% select(y, group)
return(df1)
}
dat <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
set.seed(1234)
# fix var_epsilon = 1, k = 3
simulated_fun <- function(ICC, sample_size, num_groups, var_epsilon = 1, mu = 0){
var_alpha <- (ICC * var_epsilon)/(1 - ICC)
remainder <- sample_size %% num_groups
num_j <- sample_size / num_groups
df <- data.frame()
for (i in 1:num_groups){
size <- floor(sample_size/num_groups)
if (remainder >0) {
size <- size + 1
remainder = remainder - 1
}
group_j <- data.frame(group = factor(i),
alpha_j = rnorm(n = 1, mean = 0, sd = sqrt(var_alpha)),
epsilon_ij = rnorm(n = num_j, mean = 0, sd = sqrt(var_epsilon))) %>%
mutate(y = mu + alpha_j + epsilon_ij)
df <- rbind(df, group_j)
}
df1 <- df %>% select(y, group)
return(df1)
}
dat <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
dat <- data.frame(dat)
# apply K-means clustering
K <- kmeans(dat, centers = 3)
dat
set.seed(1234)
# fix var_epsilon = 1, k = 3
simulated_fun <- function(ICC, sample_size, num_groups, var_epsilon = 1, mu = 0){
var_alpha <- (ICC * var_epsilon)/(1 - ICC)
remainder <- sample_size %% num_groups
num_j <- sample_size / num_groups
df <- data.frame()
for (i in 1:num_groups){
size <- floor(sample_size/num_groups)
if (remainder >0) {
size <- size + 1
remainder = remainder - 1
}
group_j <- data.frame(group = i,
alpha_j = rnorm(n = 1, mean = 0, sd = sqrt(var_alpha)),
epsilon_ij = rnorm(n = num_j, mean = 0, sd = sqrt(var_epsilon))) %>%
mutate(y = mu + alpha_j + epsilon_ij)
df <- rbind(df, group_j)
}
df1 <- df %>% select(y, group)
return(df1)
}
dat <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
dat <- data.frame(dat)
dat
# apply K-means clustering
K <- kmeans(dat, centers = 3)
dat
set.seed(1234)
# fix var_epsilon = 1, k = 3
simulated_fun <- function(ICC, sample_size, num_groups, var_epsilon = 1, mu = 0){
var_alpha <- (ICC * var_epsilon)/(1 - ICC)
remainder <- sample_size %% num_groups
df <- data.frame()
for (i in 1:num_groups){
size <- floor(sample_size/num_groups)
if (remainder > 0) {
size <- size + 1
remainder = remainder - 1
}
group_j <- data.frame(group = i,
alpha_j = rnorm(n = 1, mean = 0, sd = sqrt(var_alpha)),
epsilon_ij = rnorm(n = num_j, mean = 0, sd = sqrt(var_epsilon))) %>%
mutate(y = mu + alpha_j + epsilon_ij)
df <- rbind(df, group_j)
}
df1 <- df %>% select(y)
return(df1)
}
dat <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
set.seed(1234)
# fix var_epsilon = 1, k = 3
simulated_fun <- function(ICC, sample_size, num_groups, var_epsilon = 1, mu = 0){
var_alpha <- (ICC * var_epsilon)/(1 - ICC)
remainder <- sample_size %% num_groups
df <- data.frame()
for (i in 1:num_groups){
size <- floor(sample_size/num_groups)
if (remainder > 0) {
size <- size + 1
remainder = remainder - 1
}
group_j <- data.frame(group = i,
alpha_j = rnorm(n = 1, mean = 0, sd = sqrt(var_alpha)),
epsilon_ij = rnorm(n = size, mean = 0, sd = sqrt(var_epsilon))) %>%
mutate(y = mu + alpha_j + epsilon_ij)
df <- rbind(df, group_j)
}
df1 <- df %>% select(y)
return(df1)
}
dat <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
dat <- data.frame(dat)
dat
# apply K-means clustering
K <- kmeans(dat, centers = 3)
fviz_cluster(K, data = dat,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
set.seed(1234)
# fix var_epsilon = 1, k = 3
simulated_fun <- function(ICC, sample_size, num_groups, var_epsilon = 1, mu = 0){
var_alpha <- (ICC * var_epsilon)/(1 - ICC)
remainder <- sample_size %% num_groups
df <- data.frame()
for (i in 1:num_groups){
size <- floor(sample_size/num_groups)
if (remainder > 0) {
size <- size + 1
remainder = remainder - 1
}
group_j <- data.frame(group = i,
alpha_j = rnorm(n = 1, mean = 0, sd = sqrt(var_alpha)),
epsilon_ij = rnorm(n = size, mean = 0, sd = sqrt(var_epsilon))) %>%
mutate(y = mu + alpha_j + epsilon_ij)
df <- rbind(df, group_j)
}
df1 <- df %>% select(y, group)
return(df1)
}
dat <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
dat <- data.frame(dat)
dat
# apply K-means clustering
K <- kmeans(dat, centers = 3)
dat
set.seed(1234)
# fix var_epsilon = 1, k = 3
simulated_fun <- function(ICC, sample_size, num_groups, var_epsilon = 1, mu = 0){
var_alpha <- (ICC * var_epsilon)/(1 - ICC)
remainder <- sample_size %% num_groups
df <- data.frame(y = numeric(), group = factor())
for (i in c(1:num_groups)){
size <- floor(sample_size/num_groups)
if (remainder > 0) {
size <- size + 1
remainder = remainder - 1
}
group_j <- data.frame(group = factor(i),
alpha_j = rnorm(n = 1, mean = 0, sd = sqrt(var_alpha)),
epsilon_ij = rnorm(n = size, mean = 0, sd = sqrt(var_epsilon))) %>%
mutate(y = mu + alpha_j + epsilon_ij)
df <- rbind(df, group_j)
}
df1 <- df %>% select(y, group)
return(df1)
}
dat <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
dat <- data.frame(dat)
dat
# apply K-means clustering
K <- kmeans(dat, centers = 3)
dat
df1
simulated_fun <- function(ICC, sample_size, num_groups, var_epsilon = 1, mu = 0){
var_alpha <- (ICC * var_epsilon)/(1 - ICC)
remainder <- sample_size %% num_groups
df <- data.frame()
for (i in c(1:num_groups)){
size <- floor(sample_size/num_groups)
if (remainder > 0) {
size <- size + 1
remainder = remainder - 1
}
group_j <- data.frame(group = factor(i),
alpha_j = rnorm(n = 1, mean = 0, sd = sqrt(var_alpha)),
epsilon_ij = rnorm(n = size, mean = 0, sd = sqrt(var_epsilon))) %>%
mutate(y = mu + alpha_j + epsilon_ij)
df <- rbind(df, group_j)
}
df1 <- df %>% select(y, group)
return(df1)
}
simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3)
tally
tally()
simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3)$y
set.seed(1234)
# fix var_epsilon = 1, k = 3
simulated_fun <- function(ICC, sample_size, num_groups, var_epsilon = 1, mu = 0){
var_alpha <- (ICC * var_epsilon)/(1 - ICC)
remainder <- sample_size %% num_groups
df <- data.frame()
for (i in c(1:num_groups)){
size <- floor(sample_size/num_groups)
if (remainder > 0) {
size <- size + 1
remainder = remainder - 1
}
group_j <- data.frame(group = factor(i),
alpha_j = rnorm(n = 1, mean = 0, sd = sqrt(var_alpha)),
epsilon_ij = rnorm(n = size, mean = 0, sd = sqrt(var_epsilon))) %>%
mutate(y = mu + alpha_j + epsilon_ij)
df <- rbind(df, group_j)
}
df1 <- df %>% select(y)
return(df1)
}
dat <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
dat <- data.frame(dat)
# apply K-means clustering
K <- kmeans(dat, centers = 3)
fviz_cluster(K, data = dat,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
fviz_cluster(K, data = dat,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw(),
main = "Cluster plot with icc = 0.3"
)
LIVER <- read.table(url("https://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"), sep = ",")
names(LIVER) <- c("Age", "Gender", "TotBili","DirectBili","ALK","AAP","AAP2","TP","ALB","A-GRatio","Disease")
Liver <- na.omit(LIVER)
Liver$Disease <- factor(Liver$Disease, levels = c(1,2), labels = c("Disease", "Not Diseased"))
LiverLab <- Liver[,3:10]
LiverScale <- scale(LiverLab)
###Set seed for reproducibility
set.seed(99)
K2s <- kmeans(LiverScale, centers = 2)
table(K2s$cluster, Liver$Disease)
prop.table(table(K2s$cluster, Liver$Disease), margin = 1)
rep(1,34)
rep(1,34) + rep(2,33)
c(rep(1,34), rep(2,33), rep(3,33))
dat <- cbind(dat_k, group = c(rep(1,34), rep(2,33), rep(3,33)))
dat_k <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
dat_k <- data.frame(dat)
dat <- cbind(dat_k, group = c(rep(1,34), rep(2,33), rep(3,33)))
dat_k <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
dat_k <- data.frame(dat_k)
dat <- cbind(dat_k, group = c(rep(1,34), rep(2,33), rep(3,33)))
dat
dat_k <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
dat_k <- data.frame(dat_k)
group <- data.frame(c(rep(1,34), rep(2,33), rep(3,33)))
dat <- cbind(dat_k, group)
dat
summay(dat)
summary(dat)
head(dat)
dat <- cbind(dat_k, group = group)
head(dat)
dat[,-1]
dat[-1]
dat[51]
colnames(dat[51]) <- "group"
dat
names(dat)[51] <- "group"
dat
set.seed(1234)
# fix var_epsilon = 1, k = 3
simulated_fun <- function(ICC, sample_size, num_groups, var_epsilon = 1, mu = 0){
var_alpha <- (ICC * var_epsilon)/(1 - ICC)
remainder <- sample_size %% num_groups
df <- data.frame()
for (i in c(1:num_groups)){
size <- floor(sample_size/num_groups)
if (remainder > 0) {
size <- size + 1
remainder = remainder - 1
}
group_j <- data.frame(group = factor(i),
alpha_j = rnorm(n = 1, mean = 0, sd = sqrt(var_alpha)),
epsilon_ij = rnorm(n = size, mean = 0, sd = sqrt(var_epsilon))) %>%
mutate(y = mu + alpha_j + epsilon_ij)
df <- rbind(df, group_j)
}
df1 <- df %>% select(y)
return(df1)
}
dat_k <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
dat_k <- data.frame(dat_k)
group <- data.frame(c(rep(1,34), rep(2,33), rep(3,33)))
dat <- cbind(dat_k, group)
names(dat)[51] <- "group"
dat
# apply K-means clustering
K <- kmeans(dat_k, centers = 3)
fviz_cluster(K, data = dat_k,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw(),
main = "Cluster plot with icc = 0.3"
)
# evaluate
table(K$cluster, dat$group)
prop.table(table(K$cluster, dat$group), margin = 1)
tibble(cluster = K$cluster) %>% group_by(cluster) %>% tally()
# evaluate
table(K$cluster, dat$group)
table(K$cluster, dat$group)
prop.table(table(K$cluster, dat$group), margin = 1)
table(K2s$cluster, Liver$Disease)
prop.table(table(K2s$cluster, Liver$Disease), margin = 1)
set.seed(1234)
# fix var_epsilon = 1, k = 3
simulated_fun <- function(ICC, sample_size, num_groups, var_epsilon = 1, mu = 0){
var_alpha <- (ICC * var_epsilon)/(1 - ICC)
remainder <- sample_size %% num_groups
df <- data.frame()
for (i in c(1:num_groups)){
size <- floor(sample_size/num_groups)
if (remainder > 0) {
size <- size + 1
remainder = remainder - 1
}
group_j <- data.frame(group = factor(i),
alpha_j = rnorm(n = 1, mean = 0, sd = sqrt(var_alpha)),
epsilon_ij = rnorm(n = size, mean = 0, sd = sqrt(var_epsilon))) %>%
mutate(y = mu + alpha_j + epsilon_ij)
df <- rbind(df, group_j)
}
df1 <- df %>% select(y)
return(df1)
}
dat_k <- replicate(50, simulated_fun(ICC = 0.3, sample_size = 100, num_groups = 3))
dat_k <- data.frame(dat_k)
group <- data.frame(c(rep(1,34), rep(2,33), rep(3,33)))
dat <- cbind(dat_k, group)
names(dat)[51] <- "group"
dat$group <- factor(dat$group, levels = c(1,2,3), labels = c("True1", "True2", "True3"))
# apply K-means clustering
K <- kmeans(dat_k, centers = 3)
fviz_cluster(K, data = dat_k,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw(),
main = "Cluster plot with icc = 0.3"
)
# evaluate
table(K$cluster, dat$group)
prop.table(table(K$cluster, dat$group), margin = 1)
#tibble(cluster = K$cluster) %>% group_by(cluster) %>% tally()
# evaluate
print("Tables show the cluster labels and the true group labels:")
table(K$cluster, dat$group)
prop.table(table(K$cluster, dat$group), margin = 1)
dat2 <- cbind(temp, group)
icc <- c(0, 0.2, 0.4, 0.6, 0.8, 0.9, 0.95)
SS <- c()
sil <- c()
# simulate the data
for (i in 1:length(icc)){
temp <- replicate(50, simulated_fun(ICC = icc[i], sample_size = 100, num_groups = 3))
temp <- data.frame(temp)
dist <- dist(temp)
k <- kmeans(temp, centers = 3)
km_stats <- cluster.stats(dist,  k$cluster, silhouette = TRUE)
SS <- append(SS, k$tot.withinss)
sil <- append(sil, km_stats$avg.silwidth)
}
dat2 <- cbind(temp, group)
head(dat2)
group <- data.frame(group = c(rep(1,34), rep(2,33), rep(3,33)))
dat <- cbind(dat_k, group)
dat[-1]
dat[51]
group <- data.frame(group = c(rep(1,34), rep(2,33), rep(3,33)))
dat2 <- cbind(temp, group)
head(dat2)
dat2$group <- factor(dat2$group, levels = c(1,2,3), labels = c("True1", "True2", "True3"))
# Within SS
plot(icc, SS, type = "b", xlab = "ICC", ylab = "Total within-cluster sum of squares", xlim = range(0:1))
# Average silhoutte
plot(icc, sil, type = "b", xlab = "ICC", ylab = "Average silhoutte", xlim = range(0:1))
setwd("~/Documents/2020_Fall/823/BIOS-823/Homework/Assignment 3/images")
getwd()
